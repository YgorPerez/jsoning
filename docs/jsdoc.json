[
  {
    "comment": "/**\r\n   *\r\n   * Create a new JSON file for storing or initialize an exisiting file to be used.\r\n   *\r\n   * @param {string} database The name of the JSON file to be created or used.\r\n   * @returns {boolean} Returns true.\r\n   * @example\r\n   * const jsoning = require('jsoning');\r\n   * \r\n   * let database = new jsoning(\"database.json\");\r\n   * \r\n   * let database = new jsoning(\"../path/to/database.json\");\r\n   */",
    "meta": {
      "range": [
        1238,
        1812
      ],
      "filename": "jsoning.js",
      "lineno": 36,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000025",
        "name": "Jsoning",
        "type": "MethodDefinition",
        "paramnames": [
          "database"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Create a new JSON file for storing or initialize an exisiting file to be used.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the JSON file to be created or used.",
        "name": "database"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns true."
      }
    ],
    "examples": [
      "const jsoning = require('jsoning');\r\rlet database = new jsoning(\"database.json\");\r\rlet database = new jsoning(\"../path/to/database.json\");"
    ],
    "name": "Jsoning",
    "longname": "Jsoning",
    "kind": "class",
    "scope": "global",
    "$longname": "Jsoning",
    "$kind": "constructor",
    "$docmaLink": "?api#Jsoning"
  },
  {
    "comment": "/**\r\n   *\r\n   * Returns all the elements and their values of the JSON file.\r\n   *\r\n   * @returns {Object} All the key-value pairs of the database.\r\n   * @example\r\n   * database.set(\"foo\", \"bar\");\r\n   * database.set(\"hi\", \"hello\");\r\n   *\r\n   * let all = database.all();\r\n   * console.log(all); // { \"foo\": \"bar\", \"hi\": \"hello\" }\r\n   *\r\n   */",
    "meta": {
      "range": [
        3358,
        3499
      ],
      "filename": "jsoning.js",
      "lineno": 109,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000161",
        "name": "Jsoning#all",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Returns all the elements and their values of the JSON file.",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "All the key-value pairs of the database."
      }
    ],
    "examples": [
      "database.set(\"foo\", \"bar\");\rdatabase.set(\"hi\", \"hello\");\r\rlet all = database.all();\rconsole.log(all); // { \"foo\": \"bar\", \"hi\": \"hello\" }"
    ],
    "name": "all",
    "longname": "Jsoning#all",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "params": [],
    "$longname": "Jsoning#all",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#all"
  },
  {
    "comment": "/**\r\n   *\r\n   * Clears the whole JSON database.\r\n   *\r\n   * @returns {Promise<boolean>}\r\n   * @example\r\n   * database.set(\"foo\", \"bar\");\r\n   * database.set(\"en\", \"db\");\r\n   *\r\n   * database.clear(); // return {}\r\n   *\r\n   */",
    "meta": {
      "range": [
        5598,
        5869
      ],
      "filename": "jsoning.js",
      "lineno": 196,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000357",
        "name": "Jsoning#clear",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Clears the whole JSON database.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        }
      }
    ],
    "examples": [
      "database.set(\"foo\", \"bar\");\rdatabase.set(\"en\", \"db\");\r\rdatabase.clear(); // return {}"
    ],
    "name": "clear",
    "longname": "Jsoning#clear",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "params": [],
    "async": true,
    "$longname": "Jsoning#clear",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#clear"
  },
  {
    "comment": "/**\r\n   *\r\n   * Deletes an element from the database based on its key.\r\n   *\r\n   * @param {string} key The key of the element to be deleted.\r\n   * @returns {Promise<boolean>} Returns true if the value exists, else returns false.\r\n   * @example\r\n   * database.set(\"ping\", \"pong\");\r\n   * database.set(\"foo\", \"bar\");\r\n   *\r\n   * database.delete(\"foo\"); // returns true\r\n   *\r\n   */",
    "meta": {
      "range": [
        3887,
        4587
      ],
      "filename": "jsoning.js",
      "lineno": 128,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000192",
        "name": "Jsoning#delete",
        "type": "MethodDefinition",
        "paramnames": [
          "key"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Deletes an element from the database based on its key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to be deleted.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "Returns true if the value exists, else returns false."
      }
    ],
    "examples": [
      "database.set(\"ping\", \"pong\");\rdatabase.set(\"foo\", \"bar\");\r\rdatabase.delete(\"foo\"); // returns true"
    ],
    "name": "delete",
    "longname": "Jsoning#delete",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "async": true,
    "$longname": "Jsoning#delete",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#delete"
  },
  {
    "comment": "/**\r\n   *\r\n   * Gets the value of an element based on it's key.\r\n   *\r\n   * @param {string} key The key of the element to be fetched.\r\n   * @returns {JSONValue} Returns value, if element exists, else returns false.\r\n   * @example\r\n   * database.set(\"food\", \"pizza\");\r\n   *\r\n   * let food = database.get(\"food\");\r\n   * console.log(food) // returns pizza\r\n   *\r\n   */",
    "meta": {
      "range": [
        4962,
        5364
      ],
      "filename": "jsoning.js",
      "lineno": 168,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000290",
        "name": "Jsoning#get",
        "type": "MethodDefinition",
        "paramnames": [
          "key"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Gets the value of an element based on it's key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to be fetched.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "JSONValue"
          ]
        },
        "description": "Returns value, if element exists, else returns false."
      }
    ],
    "examples": [
      "database.set(\"food\", \"pizza\");\r\rlet food = database.get(\"food\");\rconsole.log(food) // returns pizza"
    ],
    "name": "get",
    "longname": "Jsoning#get",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "$longname": "Jsoning#get",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#get"
  },
  {
    "comment": "/**\r\n   *\r\n   * Check if a particular element exists by key.\r\n   *\r\n   * @param {string} key The key of the element to see if the element exists.\r\n   *\r\n   * @returns {boolean} True if the element exists, false if the element doesn't exist.\r\n   *\r\n   * @example\r\n   * database.set(\"some value\", \"hi\");\r\n   *\r\n   * let has = database.has(\"some value\");\r\n   * console.log(has); // returns true\r\n   *\r\n   * let has2 = database.has(\"value\");\r\n   * console.log(has2); // returns false\r\n   */",
    "meta": {
      "range": [
        8934,
        9312
      ],
      "filename": "jsoning.js",
      "lineno": 314,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000584",
        "name": "Jsoning#has",
        "type": "MethodDefinition",
        "paramnames": [
          "key"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Check if a particular element exists by key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to see if the element exists.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True if the element exists, false if the element doesn't exist."
      }
    ],
    "examples": [
      "database.set(\"some value\", \"hi\");\r\rlet has = database.has(\"some value\");\rconsole.log(has); // returns true\r\rlet has2 = database.has(\"value\");\rconsole.log(has2); // returns false"
    ],
    "name": "has",
    "longname": "Jsoning#has",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "$longname": "Jsoning#has",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#has"
  },
  {
    "comment": "/**\r\n   *\r\n   * Performs mathematical operations on values of elements.\r\n   *\r\n   * @param {string} key The key of the element on which the mathematical operation is to be performed.\r\n   * @param {string} operation The operation to perform, one of add, subtract, multiply and divide.\r\n   * @param {number} operand The number for performing the mathematical operation (the operand).\r\n   *\r\n   * @returns {Promise<boolean>} True if the operation succeeded, else false.\r\n   *\r\n   * @example\r\n   * database.set(\"value1\", 1);\r\n   * database.set(\"value2\", 10);\r\n   *\r\n   * database.math(\"value1\", \"add\", 1);\r\n   * database.math(\"value2\", \"multiply\", 5);\r\n   *\r\n   * console.log(database.get(\"value1\")); // returns 1+1 = 2\r\n   * console.log(database.get(\"value2\")); // returns 10*5 = 50\r\n   *\r\n   */",
    "meta": {
      "range": [
        6671,
        8438
      ],
      "filename": "jsoning.js",
      "lineno": 231,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000396",
        "name": "Jsoning#math",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "operation",
          "operand"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Performs mathematical operations on values of elements.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element on which the mathematical operation is to be performed.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The operation to perform, one of add, subtract, multiply and divide.",
        "name": "operation"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number for performing the mathematical operation (the operand).",
        "name": "operand"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "True if the operation succeeded, else false."
      }
    ],
    "examples": [
      "database.set(\"value1\", 1);\rdatabase.set(\"value2\", 10);\r\rdatabase.math(\"value1\", \"add\", 1);\rdatabase.math(\"value2\", \"multiply\", 5);\r\rconsole.log(database.get(\"value1\")); // returns 1+1 = 2\rconsole.log(database.get(\"value2\")); // returns 10*5 = 50"
    ],
    "name": "math",
    "longname": "Jsoning#math",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "async": true,
    "$longname": "Jsoning#math",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#math"
  },
  {
    "comment": "/**\r\n   *\r\n   * This function will push the given value into the provided element (if it's an array) in the database based on the key. If no such element exists, it will initialize a new element with an empty array.\r\n   *\r\n   * @param {string} key\r\n   * @param {JSONValue} value\r\n   *\r\n   * @returns {Promise<boolean>} True if the the value was pushed to an array successfully, else false.\r\n   *\r\n   * @example\r\n   * database.push(\"leaderboard\", \"khaleel\");\r\n   * database.push(\"leaderboard\", \"RiversideRocks\");\r\n   *\r\n   */",
    "meta": {
      "range": [
        9846,
        11681
      ],
      "filename": "jsoning.js",
      "lineno": 344,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000645",
        "name": "Jsoning#push",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "This function will push the given value into the provided element (if it's an array) in the database based on the key. If no such element exists, it will initialize a new element with an empty array.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "key"
      },
      {
        "type": {
          "names": [
            "JSONValue"
          ]
        },
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "True if the the value was pushed to an array successfully, else false."
      }
    ],
    "examples": [
      "database.push(\"leaderboard\", \"khaleel\");\rdatabase.push(\"leaderboard\", \"RiversideRocks\");"
    ],
    "name": "push",
    "longname": "Jsoning#push",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "async": true,
    "$longname": "Jsoning#push",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#push"
  },
  {
    "comment": "/**\r\n   *\r\n   * This function will remove a given primitive value from an array in the database based on the key. If no existing array, it will do nothing.\r\n   *\r\n   * @param {string} key\r\n   * @param {JSONValue} value\r\n   *\r\n   * @returns {Promise<boolean>} True if successfully removed or not found or the key does not exist, else false.\r\n   *\r\n   * @example\r\n   * database.remove(\"leaderboard\", \"wh0\");\r\n   *\r\n   */",
    "meta": {
      "range": [
        12109,
        12797
      ],
      "filename": "jsoning.js",
      "lineno": 418,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000865",
        "name": "Jsoning#remove",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "This function will remove a given primitive value from an array in the database based on the key. If no existing array, it will do nothing.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "key"
      },
      {
        "type": {
          "names": [
            "JSONValue"
          ]
        },
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "True if successfully removed or not found or the key does not exist, else false."
      }
    ],
    "examples": [
      "database.remove(\"leaderboard\", \"wh0\");"
    ],
    "name": "remove",
    "longname": "Jsoning#remove",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "async": true,
    "$longname": "Jsoning#remove",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#remove"
  },
  {
    "comment": "/**\r\n   *\r\n   * Adds an element to the database with the specified value. If element with the given key exists, element value is updated.\r\n   *\r\n   * @param {string} key Key of the element to be set.\r\n   * @param {JSONValue} value Value of the element to be set.\r\n   * @returns {Promise<boolean>} If element is set/updated successfully, returns true; else false.\r\n   * \r\n   * @example\r\n   * database.set(\"foo\", \"bar\");\r\n   * database.set(\"hi\", 3);\r\n   *\r\n   * database.set(\"en\", \"db\"); // { \"en\": \"db\" }\r\n   * database.set(\"en\", \"en\"); // { \"en\": \"en\" }\r\n   *\r\n   * let set = database.set(\"khaleel\", \"gibran\");\r\n   * console.log(set); // returns true\r\n   *\r\n   */",
    "meta": {
      "range": [
        2485,
        3008
      ],
      "filename": "jsoning.js",
      "lineno": 74,
      "columnno": 2,
      "path": "C:\\jsoning\\src",
      "code": {
        "id": "astnode100000083",
        "name": "Jsoning#set",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Adds an element to the database with the specified value. If element with the given key exists, element value is updated.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Key of the element to be set.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "JSONValue"
          ]
        },
        "description": "Value of the element to be set.",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "If element is set/updated successfully, returns true; else false."
      }
    ],
    "examples": [
      "database.set(\"foo\", \"bar\");\rdatabase.set(\"hi\", 3);\r\rdatabase.set(\"en\", \"db\"); // { \"en\": \"db\" }\rdatabase.set(\"en\", \"en\"); // { \"en\": \"en\" }\r\rlet set = database.set(\"khaleel\", \"gibran\");\rconsole.log(set); // returns true"
    ],
    "name": "set",
    "longname": "Jsoning#set",
    "kind": "function",
    "memberof": "Jsoning",
    "scope": "instance",
    "async": true,
    "$longname": "Jsoning#set",
    "$kind": "method",
    "$docmaLink": "?api#Jsoning#set"
  }
]